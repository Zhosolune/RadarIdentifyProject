---
description: 
globs: 
alwaysApply: true
---
# 事件和信号流程规则

## 通信层次结构

1. **三层通信模型**：
   - 业务逻辑层：使用事件总线（EventBus）通信
   - 应用服务层：使用方法调用和事件总线通信
   - UI层：使用Qt信号槽（Signal-Slot）通信

2. **层间通信规则**：
   - 业务逻辑层 → 应用服务层：通过事件总线
   - 应用服务层 → UI层：通过事件总线触发UI处理器
   - UI处理器 → UI组件：通过Qt信号槽

## 事件流程规则

1. **标准事件流程**：
   ```
   用户操作 → UI事件 → 任务创建 → 事件发布(started) → 
   业务逻辑处理 → 事件发布(completed/failed) → 
   UI处理器接收事件 → 发送Qt信号 → UI更新
   ```

2. **事件传播规则**：
   - 事件只能向上传播（从业务逻辑层到UI层）
   - UI层不应直接发布业务事件
   - 业务逻辑层不应直接发送UI信号

## 信号处理规则

1. **信号连接规则**：
   - 所有信号连接应在初始化阶段完成（如`_setup_signals`方法）
   - 信号连接应明确记录在文档中
   - 避免运行时动态连接/断开信号

2. **信号槽命名规则**：
   - 信号名应使用动词_名词格式，如`import_finished`
   - 槽函数名应使用`_on_信号名`格式，如`_on_import_finished`
   - 处理器方法应使用`_handle_操作名_result`格式，如`_handle_import_result`

## 事件和信号映射

1. **事件到信号的映射**：
   - 每个业务事件应有明确对应的UI信号
   - 映射关系应在UI处理器中定义
   - 示例：`import_task_completed`事件 → `import_finished`信号

2. **避免重复发送**：
   - 每个信号只能有一个发送点
   - 事件处理器不应直接发送信号
   - 任务回调函数负责发送对应信号

## 文档化要求

1. **流程文档**：
   - 为每个主要操作（如导入、切片）创建流程图
   - 明确记录事件和信号的触发顺序
   - 文档化异常处理流程

2. **注释规范**：
   - 每个事件处理方法必须有文档注释
   - 注释应说明处理的事件类型和预期行为
   - 明确说明方法是否发送信号

## 调试和测试

1. **日志记录**：
   - 事件发布和处理应记录详细日志
   - 信号发送和接收应记录调试日志
   - 使用不同的日志级别区分重要性

2. **测试要求**：
   - 编写单元测试验证事件处理逻辑
   - 编写集成测试验证完整的事件-信号流程
   - 测试异常情况下的事件处理

## 事件-信号流程图

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│  用户操作   │     │  UI处理器   │     │  任务执行   │     │ 事件处理器  │
└─────┬───────┘     └─────┬───────┘     └─────┬───────┘     └─────┬───────┘
      │                   │                   │                   │
      │ 触发UI事件        │                   │                   │
      ├──────────────────>│                   │                   │
      │                   │ 创建任务          │                   │
      │                   ├──────────────────>│                   │
      │                   │                   │ 发布started事件   │
      │                   │                   ├──────────────────>│
      │                   │                   │                   │ 处理事件
      │                   │                   │                   ├─────┐
      │                   │                   │                   │     │
      │                   │                   │                   │<────┘
      │                   │                   │ 执行业务逻辑      │
      │                   │                   ├─────┐             │
      │                   │                   │     │             │
      │                   │                   │<────┘             │
      │                   │                   │ 发布completed事件 │
      │                   │                   ├──────────────────>│
      │                   │                   │                   │ 处理事件
      │                   │                   │                   ├─────┐
      │                   │                   │                   │     │
      │                   │                   │                   │<────┘
      │                   │ 任务回调          │                   │
      │                   │<──────────────────┤                   │
      │                   │ 发送Qt信号        │                   │
      │                   ├─────┐             │                   │
      │                   │     │             │                   │
      │                   │<────┘             │                   │
      │ UI更新            │                   │                   │
      │<──────────────────┤                   │                   │
      │                   │                   │                   │
```

## 相关文件

- [event_bus.py](mdc:RadarIdentifySystem/radar_system/infrastructure/async_core/event_bus/event_bus.py) - 事件总线实现
- [ui_handlers.py](mdc:RadarIdentifySystem/radar_system/interface/handlers/ui_handlers.py) - UI事件处理器
- [main_window.py](mdc:RadarIdentifySystem/radar_system/interface/views/main_window.py) - 主窗口实现

